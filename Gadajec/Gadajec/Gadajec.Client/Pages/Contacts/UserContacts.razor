@page "/usercontacts"

<PageTitle>Kontakty</PageTitle>

<HeadContent>
    <meta name="description" content="This is test from contacts" />
</HeadContent>

@inject IApiBroker apiBroker;
@using Gadajec.Client.Brokers.API
@using Gadajec.Client.Shared.Templates
@using Gadajec.Shared.Rooms.Queries
@using Gadajec.Shared.Users.Commands
@inject AuthenticationStateProvider provider

 <section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-12">
                <h1 class="text-center exotic">Kontakty</h1>
            </div>
            <div class="col-sm-12">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="/">Gadajec</a></li>
                    <li class="breadcrumb-item active">Kontakty</li>
                </ol>
            </div>
        </div>
    </div><!-- /.container-fluid -->
</section>

<section class="content">

    <!-- Default box -->
    <div class="card">
        <div class="card-header">
            <div class="card-tools">
                <button type="button" class="btn btn-tool" data-card-widget="collapse" title="Collapse">
                    <i class="fas fa-minus"></i>
                </button>
                <button type="button" class="btn btn-tool" data-card-widget="remove" title="Remove">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
        <div class="card-body p-0">
            <table class="table table-striped projects">
                <thead>
                    <tr>
                        <th style="width: 1%">
                            #
                        </th>
                        <th style="width: 20%">
                            Imie Nazwisko
                        </th>
                        <th style="width: 20%">
                            Email
                        </th>
                        <th style="width: 6%">
                            Napisz do użytkownika
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <Virtualize ItemsProvider="LoadContacts" Context="item">
                            <tr>
                                <td>
                                    #
                                </td>
                                <td>
                                    <a>
                                        @item.FirstName @item.LastName
                                    </a>
                                    <br/>
                                </td>
                                <td>
                                    @item.Email
                                </td>
                                <td class="project-actions text-right">                                    
                                    <a class="btn btn-primary btn-sm" @onclick="() => SendPrivateMessage(item.Email)">
                                        <i class="fa fa-plus">
                                        </i>
                                        Chat prywatny
                                    </a>
                                </td>
                            </tr>
                    </Virtualize>
                </tbody>
            </table>
        </div>
        <!-- /.card-body -->
    </div>
    <!-- /.card -->

</section>

@code 
{
    private string UserName { get; set; }
    private ApiUserVm testUser = new ApiUserVm() { Email = "test@mail.com", FirstName = "testUser", LastName = "testus" };

    protected override async Task OnParametersSetAsync()
    {
        await GetLoggedUser();
    }

    protected async ValueTask<ItemsProviderResult<ApiUserVm>> LoadContacts(ItemsProviderRequest request)
    {

        var pageSize = request.Count;
        var index = request.StartIndex;
        var items = await apiBroker.GetAllContactsAsync(UserName);
        //var items = new List<ApiUserVm>();
        //items.Add(testUser);
        return new ItemsProviderResult<ApiUserVm>(items.Skip(index).Take(pageSize), items.Count());        
    }

    private async Task SendPrivateMessage(string contactEmail)
    {
    }

     private async Task GetLoggedUser()
    {
        var details = await provider.GetAuthenticationStateAsync();
        UserName = details.User.Identity?.Name;
    }


}