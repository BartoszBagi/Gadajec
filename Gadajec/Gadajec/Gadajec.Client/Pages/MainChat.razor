@page "/mainchat"
@using Gadajec.Client.Brokers.API

@inject NavigationManager NavigationManager
@inject IApiBroker apiBroker;
@inject IJSRuntime JSRuntime
<PageTitle>Gadajec Chat Publiczny</PageTitle>
<HeadContent>
    <meta name="description" content="This is test from posts" />
</HeadContent>

<h1 class="text-center exotic">Ogólne Pogadajki</h1>

@if (!IsConnected)
{
    <div class="input-group text-center">
        <!--<input @bind="username" class="form-control" placeholder="What's your name?">-->
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Dołącz do drużyny
        </button>
    </div>
}
else
{
    <textarea class="float-end" style="width: 70vw; height: 70vh;" @ref="TextAreaRef">
        @messages
                </textarea>
    <div class="input-group float-end" style="width: 70vw">
        <input @bind-value="message"
           @bind-value:event="oninput"
           @onkeyup="HandleInput"
           class="form-control">
        <button class="btn btn-primary form-group-append"
            @onclick="Send"
            disabled="@(!IsConnected)">
            Send
        </button>
    </div>
}
@code {

    ////////////// SignalR HUB /////////////
    private HubConnection? hubConnection;
    private string messages = string.Empty;
    private string username = string.Empty;
    private string message = string.Empty;
    ElementReference TextAreaRef;

    private async Task Connect()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri($"/chathub?username={username}"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ": ")}{message}";
            messages += msg + "\n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", TextAreaRef);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection != null)
        {
            await hubConnection.SendAsync("AddMessageToChat", username, message);
            message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {

        if (hubConnection != null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
